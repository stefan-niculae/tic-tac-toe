{"version":3,"sources":["../game.js"],"names":["NEED_TO_WIN","DISPLAY_SYMBOL","stateValue","GameBoard","constructor","size","root","elements","createBoard","initializeState","syncStatus","values","emptyValues","nextPlayer","winner","state","i","row","Array","fill","push","cells","r","c","cell","$","click","fillCell","rowElements","map","rowCells","append","board","status","game","col","currentValue","findWinner","syncCells","highlightWhom","value","symbol","text","addClass","removeClass","gameOver","message","sums","transpose","diagonal","mirror","sum","reachedRequired","filter","length","console","assert","Math","sign","gamesRoot"],"mappings":"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","file":"game.js","sourcesContent":["const NEED_TO_WIN = 3 // number of adjacent symbols needed to win\nconst DISPLAY_SYMBOL = (stateValue) => {\n    // mapping from internal value to external display symbol\n    if (stateValue === null) return ''\n    if (stateValue ===  +1 ) return 'X'\n    if (stateValue ===  -1 ) return 'O' // the letter O is more aesthetic than a zero\n}\n\n\nclass GameBoard {\n    constructor(size, root) {\n        this.size = size\n        this.elements = this.createBoard(root)\n\n        this.initializeState()\n        this.syncStatus()\n    }\n\n    // Initialization\n    initializeState() {\n        this.values = this.emptyValues()\n        this.nextPlayer = +1  // X\n        this.winner = null\n    }\n\n    emptyValues() {\n        let state = []\n        for (let i = 0; i < this.size; i++) {\n            let row = new Array(this.size).fill(null) // different one each time\n            state.push(row)\n        }\n        return state\n    }\n\n    createBoard(root) {\n        // create the cell objects\n        let cells = []\n        for (let r = 0; r < this.size; r++) {\n            let row = []\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>', {\n                    click: () => this.fillCell(r, c)\n                })\n                row.push(cell)\n            }\n            cells.push(row)\n        }\n\n        // build and insert the elements into the DOM\n        let rowElements = cells.map(rowCells =>\n            $('<tr>').append(rowCells)\n        )\n        let board = $('<table>', {'class': 'game-board'}).append(rowElements)\n        let status = $('<p>', {'class': 'game-status'})\n\n        let game = $('<article>', {'class': 'game'})\n            .append(board)\n            .append(status)\n        root.append(game)\n\n        return { cells, board, status }\n    }\n\n    // Updating\n    fillCell(row, col) {\n        // do nothing if the game is over\n        if (this.winner !== null)\n            return\n\n        let currentValue = this.values[row][col]\n        // do nothing if the cell is already filled\n        if (currentValue !== null)\n            return\n\n        // update the internal values and reflect the changes\n        this.values[row][col] = this.nextPlayer // set current player\n        this.nextPlayer *= -1 // switch players\n        this.winner = this.findWinner()\n\n        this.syncCells() // show symbols and highlights\n        this.syncStatus() // show next player or winner\n    }\n\n    syncCells() {\n        // reflect changes in this.values into the DOM elements, accessed through this.cells\n        // and the next player\n\n        let highlightWhom = (this.winner === null) ?\n            this.nextPlayer : // highlight the next player if game in progress\n            this.winner       // if game over, highlight the winner\n\n        for (let r = 0; r < this.size; r++) {\n            for (let c = 0; c < this.size; c++) {\n                let value = this.values[r][c]\n                let cell = this.elements['cells'][r][c]\n\n                let symbol = DISPLAY_SYMBOL(value)\n                cell.text(symbol)\n\n                if (value === highlightWhom)\n                    cell.addClass('highlighted')\n                else\n                    cell.removeClass('highlighted')\n            }\n        }\n    }\n\n    syncStatus() {\n        let gameOver = (this.winner !== null)\n        let message = gameOver ?\n            'Winner: ' + DISPLAY_SYMBOL(this.winner) :\n            'Next player: ' + DISPLAY_SYMBOL(this.nextPlayer)\n        this.elements['status'].text(message)\n\n        if (gameOver)\n            this.elements['board'].addClass('game-over')\n    }\n\n\n    // Win condition\n    findWinner() {\n        let sums = [\n            ...this.values,                // on each row\n            ...transpose(this.values),     // on each column\n            diagonal(this.values),         // on main diagonal\n            diagonal(mirror(this.values)), // on secondary diagonal\n        ].map(sum)\n\n        let reachedRequired = sums.filter(sum => sum === NEED_TO_WIN)\n        if (reachedRequired.length === 0)\n            // no symbol reached the required number of occurrences to win\n            return null\n        else {\n            console.assert(reachedRequired.length === 1,\n                'There should be at most ONE symbol to reach the required number of occurrences', reachedRequired)\n            return Math.sign(reachedRequired[0]) // +1 for a sum of 3, -1 for a sum of -3\n        }\n    }\n\n}\n\nlet gamesRoot = $('#games')\nvar game = new GameBoard(3, gamesRoot)\n"]}