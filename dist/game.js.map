{"version":3,"sources":["../game.js"],"names":["DISPLAY_SYMBOL","null","WIN_DELTAS","deepCopyArray","arr","$","extend","Game","constructor","size","root","elements","createGame","initializeState","values","emptyValues","nextPlayer","winner","history","appendStep","syncStatus","syncCells","state","i","row","Array","fill","push","createHistoryBoard","step","board","r","c","cell","value","text","append","click","truncatedHistory","slice","number","syncHistory","allCells","fillCell","message","player","status","rowElements","map","rowCells","activeSide","historyBoards","game","height","css","col","currentValue","coords","findWinner","highlightWinner","gameOver","addClass","removeClass","symbol","cells","x","y","nSteps","length","nBoards","Math","max","pastSteps","pastBoards","html","container","animate","scrollTop","scrollHeight","maybeValue","undefined","centerVal","neighborDeltas","neighborCoords","dx","dy","neighborValues","every","v","gamesRoot","n"],"mappings":"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","file":"game.js","sourcesContent":["const DISPLAY_SYMBOL = {\n    // mapping from internal value to external display symbol\n    null: '' ,\n      1 : 'X',\n    '-1': 'O', // the letter O is more aesthetic than a zero\n}\nconst WIN_DELTAS = [\n    [[-1,  0], [+1,  0]], // left, right\n    [[ 0, -1], [ 0, +1]], // above, below\n    [[-1, -1], [+1, +1]], // up-left, down-right\n    [[+1, -1], [-1, +1]], // down-left, up-right\n]\n\n// Utils\ndeepCopyArray = (arr) => $.extend(true, [], arr)\n\nclass Game {\n    constructor(size, root) {\n        this.size = size\n        this.elements = this.createGame(root)\n\n        this.initializeState()\n    }\n\n    // Initialization\n    initializeState() {\n        this.values = this.emptyValues()\n        this.nextPlayer = +1  // X\n        this.winner = null\n\n        this.history = []\n        this.appendStep()\n\n        this.syncStatus()\n        this.syncCells()\n    }\n\n    emptyValues() {\n        let state = []\n        for (let i = 0; i < this.size; i++) {\n            let row = new Array(this.size).fill(null) // different one each time\n            state.push(row)\n        }\n        return state\n    }\n\n    createHistoryBoard(step) {\n        let board = $('<table>', {'class': 'board'})\n        for (let r = 0; r < this.size; r++) {\n            let row = $('<tr>')\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>')\n                let value = step.values[r][c]\n                cell.text(DISPLAY_SYMBOL[value])\n                row.append(cell)\n            }\n            board.append(row)\n        }\n\n        board.click(() => {\n            this.values = step.values\n            this.nextPlayer = step.nextPlayer\n            this.winner = step.winner\n\n            let truncatedHistory = this.history.slice(0, step.number + 1) // keep history up until this step\n            this.history = deepCopyArray(truncatedHistory)\n\n            this.syncStatus()\n            this.syncCells()\n            this.syncHistory()\n        })\n\n        return board\n    }\n\n    createGame(root) {\n        // create the cell objects\n        let allCells = []\n        for (let r = 0; r < this.size; r++) {\n            let row = []\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>', {\n                    'class': 'ripple',\n                    click: () => this.fillCell(r, c)\n                })\n                row.push(cell)\n            }\n            allCells.push(row)\n        }\n\n        // build and insert the elements into the DOM\n        let message = $('<span>', {'class': 'message'})\n        let player  = $('<span>', {'class': 'player'})\n        let status = $('<p>', {'class': 'status'})\n            .append(message)\n            .append(': ')\n            .append(player)\n\n        let rowElements = allCells.map(rowCells => $('<tr>').append(rowCells))\n        let board = $('<table>', {'class': 'board'}).append(rowElements)\n\n        let activeSide = $('<div>', {'class': 'active-side'})\n            .append(status)\n            .append(board)\n\n        let historyBoards = $('<div>', {'class': 'boards'})\n        let history = $('<div>', {'class': 'history'})\n            .append('<p>History</p>')\n            .append(historyBoards)\n\n        let game = $('<article>', {'class': 'game'})\n            .append(activeSide)\n            .append(history)\n\n        root.append(game)\n            .append('<hr>')\n\n        // height is only evaluated after the element is inserted in the DOM\n        let height = activeSide.height()\n        history.css({height: height + 'px'})\n\n        return { allCells, game, message, player, history, historyBoards }\n    }\n\n    // Updating\n    fillCell(row, col) {\n        // do nothing if the game is over\n        if (this.winner !== null)\n            return\n\n        let currentValue = this.values[row][col]\n        // do nothing if the cell is already filled\n        if (currentValue !== null)\n            return\n\n        // update the internal values and reflect the changes\n        this.values[row][col] = this.nextPlayer // set current player\n        this.nextPlayer *= -1 // switch players\n\n        let {winner, coords} = this.findWinner()\n        this.winner = winner\n        if (winner !== null)\n            this.highlightWinner(coords)\n\n        this.syncCells() // show symbols and highlights\n        this.syncStatus() // show next player or winner\n\n        this.appendStep()\n    }\n\n    syncStatus() {\n        let gameOver = (this.winner !== null)\n        this.elements.message.text(gameOver ? 'Winner' : 'Next player')\n        this.elements.player.text(DISPLAY_SYMBOL[gameOver ? this.winner : this.nextPlayer])\n\n        if (gameOver)\n            this.elements.game.addClass('game-over')\n        else\n            this.elements.game.removeClass('game-over')\n    }\n    syncCells() {\n        // reflect changes in this.values into the DOM elements, accessed through this.cells\n        // and the next player\n\n        for (let r = 0; r < this.size; r++) {\n            for (let c = 0; c < this.size; c++) {\n                let value = this.values[r][c]\n                let cell = this.elements.allCells[r][c]\n\n                let symbol = DISPLAY_SYMBOL[value]\n                cell.text(symbol)\n\n                if (value === null) // empty cell and game is not over\n                    cell.removeClass('noninteractive')\n            }\n        }\n    }\n    highlightWinner(coords) {\n        let cells = this.elements.allCells\n        for (let row of cells)\n            for (let cell of row)\n                cell.removeClass('winner')\n\n        for (let [x, y] of coords)\n            cells[x][y].addClass('winner')\n    }\n\n\n    appendStep() {\n        let nSteps = this.history.length\n        this.history.push({\n            number: nSteps,\n            nextPlayer: this.nextPlayer,\n            values: deepCopyArray(this.values),\n            winner: this.winner,\n        })\n        this.syncHistory()\n    }\n    syncHistory() {\n        let nBoards = Math.max(1, this.history.length - 1)\n        let pastSteps = this.history.slice(0, nBoards)\n\n        let game = this\n        let pastBoards = pastSteps.map(step => game.createHistoryBoard(step))\n        this.elements.historyBoards.html(pastBoards)\n\n        let container = this.elements.history\n        container.animate({scrollTop: container[0].scrollHeight}, 200) // scroll to bottom\n    }\n\n\n    // Win condition\n    findWinner() {\n        let maybeValue = ([x, y]) =>\n            (0 <= x && x < this.size &&\n             0 <= y && y < this.size) ?\n            this.values[x][y] :\n            undefined\n\n        for (let r = 0; r < this.size; r++) {\n            for (let c = 0; c < this.size; c++) {\n                let centerVal = this.values[r][c]\n                if (centerVal === null) // there can't be a winner with an empty center\n                    continue\n\n                for (let neighborDeltas of WIN_DELTAS) {\n                    let neighborCoords = neighborDeltas.map(([dx, dy]) => [r+dx, c+dy])\n                    let neighborValues = neighborCoords.map(maybeValue)\n                    if (neighborValues.every(v => v === centerVal))\n                        return {\n                        winner: centerVal,\n                        coords: [neighborCoords[0], [r, c], neighborCoords[1]]\n                    }\n                }\n            }\n        }\n\n        return {winner: null, coords: []}\n    }\n\n}\n\nlet gamesRoot = $('#games')\nlet createGame = (n) => new Game(n, gamesRoot)\n"]}