{"version":3,"sources":["../game.js"],"names":["DISPLAY_SYMBOL","null","WIN_DELTAS","deepCopyArray","arr","$","extend","matrixIterator","matrix","row","length","col","value","applyOnEachCell","f","Game","constructor","size","root","elements","createGame","initializeState","values","emptyValues","nextPlayer","winner","history","appendStep","syncStatus","syncCells","state","i","Array","fill","push","createHistoryBoard","step","board","r","c","cell","text","append","click","truncatedHistory","slice","number","syncHistory","gameObj","allCells","event","fillCell","rippleOnClick","message","player","status","rowElements","map","rowCells","activeSide","historyBoards","game","height","css","currentValue","coords","findWinner","highlightWinner","gameOver","addClass","removeClass","symbol","cells","x","y","nSteps","nBoards","Math","max","pastSteps","pastBoards","html","container","animate","scrollTop","scrollHeight","maybeValue","undefined","neighborDeltas","neighborCoords","dx","dy","neighborValues","every","v","gamesRoot","n"],"mappings":"AAAA,MAAMA,iBAAiB;AACnB;AACAC,UAAM,EAFa;AAGnB,OAAG,GAHgB;AAInB,UAAM,GAJa,CAIR;AAJQ,CAAvB;AAMA,MAAMC,aAAa,CACf,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,EAAU,CAAC,CAAD,EAAI,CAAC,CAAL,CAAV,CADe,EACK;AACpB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAL,CAAD,EAAU,CAAC,CAAC,CAAF,EAAK,CAAL,CAAV,CAFe,EAEK;AACpB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAD,EAAW,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAX,CAHe,EAGO;AACtB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAD,EAAW,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAX,CAJe,CAAnB;;AAOA;AACAC,gBAAiBC,GAAD,IAASC,EAAEC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmBF,GAAnB,CAAzB;;AAEA,UAAUG,cAAV,CAAyBC,MAAzB,EAAiC;AAC7B,SAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMD,OAAOE,MAA/B,EAAuCD,KAAvC,EACI,KAAK,IAAIE,MAAM,CAAf,EAAkBA,MAAMH,OAAOC,GAAP,EAAYC,MAApC,EAA4CC,KAA5C,EACI,MAAM;AACFF,WADE;AAEFE,WAFE;AAGFC,eAAOJ,OAAOC,GAAP,EAAYE,GAAZ;AAHL,KAAN;AAKX;;AAED,SAASE,eAAT,CAAyBL,MAAzB,EAAiCM,CAAjC,EAAoC;AAChC,SAAK,IAAIL,MAAM,CAAf,EAAkBA,MAAMD,OAAOE,MAA/B,EAAuCD,KAAvC,EACI,KAAK,IAAIE,MAAM,CAAf,EAAkBA,MAAMH,OAAOC,GAAP,EAAYC,MAApC,EAA4CC,KAA5C,EACIG,EAAEL,GAAF,EAAOE,GAAP,EAAYH,OAAOC,GAAP,EAAYE,GAAZ,CAAZ;AACX;;AAGD,MAAMI,IAAN,CAAW;AACPC,gBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AACpB,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKE,QAAL,GAAgB,KAAKC,UAAL,CAAgBF,IAAhB,CAAhB;;AAEA,aAAKG,eAAL;AACH;;AAED;AACAA,sBAAkB;AACd,aAAKC,MAAL,GAAc,KAAKC,WAAL,EAAd;AACA,aAAKC,UAAL,GAAkB,CAAC,CAAnB,CAFc,CAEQ;AACtB,aAAKC,MAAL,GAAc,IAAd;;AAEA,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKC,UAAL;;AAEA,aAAKC,UAAL;AACA,aAAKC,SAAL;AACH;;AAEDN,kBAAc;AACV,YAAIO,QAAQ,EAAZ;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKd,IAAzB,EAA+Bc,GAA/B,EAAoC;AAChC,gBAAItB,MAAM,IAAIuB,KAAJ,CAAU,KAAKf,IAAf,EAAqBgB,IAArB,CAA0B,IAA1B,CAAV,CADgC,CACU;AAC1CH,kBAAMI,IAAN,CAAWzB,GAAX;AACH;AACD,eAAOqB,KAAP;AACH;;AAEDK,uBAAmBC,IAAnB,EAAyB;AACrB,YAAIC,QAAQhC,EAAE,SAAF,EAAa,EAAC,SAAS,OAAV,EAAb,CAAZ;AACA,aAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAI,KAAKrB,IAAzB,EAA+BqB,GAA/B,EAAoC;AAChC,gBAAI7B,MAAMJ,EAAE,MAAF,CAAV;AACA,iBAAK,IAAIkC,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,IAAzB,EAA+BsB,GAA/B,EAAoC;AAChC,oBAAIC,OAAOnC,EAAE,MAAF,CAAX;AACA,oBAAIO,QAAQwB,KAAKd,MAAL,CAAYgB,CAAZ,EAAeC,CAAf,CAAZ;AACAC,qBAAKC,IAAL,CAAUzC,eAAeY,KAAf,CAAV;AACAH,oBAAIiC,MAAJ,CAAWF,IAAX;AACH;AACDH,kBAAMK,MAAN,CAAajC,GAAb;AACH;;AAED4B,cAAMM,KAAN,CAAY,MAAM;AACd,iBAAKrB,MAAL,GAAcc,KAAKd,MAAnB;AACA,iBAAKE,UAAL,GAAkBY,KAAKZ,UAAvB;AACA,iBAAKC,MAAL,GAAcW,KAAKX,MAAnB;;AAEA,gBAAImB,mBAAmB,KAAKlB,OAAL,CAAamB,KAAb,CAAmB,CAAnB,EAAsBT,KAAKU,MAAL,GAAc,CAApC,CAAvB,CALc,CAKgD;AAC9D,iBAAKpB,OAAL,GAAevB,cAAcyC,gBAAd,CAAf;;AAEA,iBAAKhB,UAAL;AACA,iBAAKC,SAAL;AACA,iBAAKkB,WAAL;AACH,SAXD;;AAaA,eAAOV,KAAP;AACH;;AAEDjB,eAAWF,IAAX,EAAiB;AACb,YAAI8B,UAAU,IAAd;;AAEA;AACA,YAAIC,WAAW,EAAf;AACA,aAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAI,KAAKrB,IAAzB,EAA+BqB,GAA/B,EAAoC;AAChC,gBAAI7B,MAAM,EAAV;AACA,iBAAK,IAAI8B,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,IAAzB,EAA+BsB,GAA/B,EAAoC;AAChC,oBAAIC,OAAOnC,EAAE,MAAF,EAAU,EAAC,SAAS,QAAV,EAAV,CAAX;AACAmC,qBAAKG,KAAL,CAAWO,SAAS;AAChBF,4BAAQG,QAAR,CAAiBb,CAAjB,EAAoBC,CAApB;AACAa,kCAAcF,KAAd,EAAqBV,IAArB;AACH,iBAHD;AAIA/B,oBAAIyB,IAAJ,CAASM,IAAT;AACH;AACDS,qBAASf,IAAT,CAAczB,GAAd;AACH;;AAED;AACA,YAAI4C,UAAUhD,EAAE,QAAF,EAAY,EAAC,SAAS,SAAV,EAAZ,CAAd;AACA,YAAIiD,SAASjD,EAAE,QAAF,EAAY,EAAC,SAAS,QAAV,EAAZ,CAAb;AACA,YAAIkD,SAASlD,EAAE,KAAF,EAAS,EAAC,SAAS,QAAV,EAAT,EACRqC,MADQ,CACDW,OADC,EAERX,MAFQ,CAED,IAFC,EAGRA,MAHQ,CAGDY,MAHC,CAAb;;AAKA,YAAIE,cAAcP,SAASQ,GAAT,CAAaC,YAAYrD,EAAE,MAAF,EAAUqC,MAAV,CAAiBgB,QAAjB,CAAzB,CAAlB;AACA,YAAIrB,QAAQhC,EAAE,SAAF,EAAa,EAAC,SAAS,OAAV,EAAb,EAAiCqC,MAAjC,CAAwCc,WAAxC,CAAZ;;AAEA,YAAIG,aAAatD,EAAE,OAAF,EAAW,EAAC,SAAS,aAAV,EAAX,EACZqC,MADY,CACLa,MADK,EAEZb,MAFY,CAELL,KAFK,CAAjB;;AAIA,YAAIuB,gBAAgBvD,EAAE,OAAF,EAAW,EAAC,SAAS,QAAV,EAAX,CAApB;AACA,YAAIqB,UAAUrB,EAAE,OAAF,EAAW,EAAC,SAAS,SAAV,EAAX,EACTqC,MADS,CACF,gBADE,EAETA,MAFS,CAEFkB,aAFE,CAAd;;AAIA,YAAIC,OAAOxD,EAAE,WAAF,EAAe,EAAC,SAAS,MAAV,EAAf,EACNqC,MADM,CACCiB,UADD,EAENjB,MAFM,CAEChB,OAFD,CAAX;;AAIAR,aAAKwB,MAAL,CAAYmB,IAAZ,EACKnB,MADL,CACY,MADZ;;AAGA;AACA,YAAIoB,SAASH,WAAWG,MAAX,EAAb;AACApC,gBAAQqC,GAAR,CAAY,EAACD,QAAQA,SAAS,IAAlB,EAAZ;;AAEA,eAAO,EAACb,QAAD,EAAWY,IAAX,EAAiBR,OAAjB,EAA0BC,MAA1B,EAAkC5B,OAAlC,EAA2CkC,aAA3C,EAAP;AACH;;AAED;AACAT,aAAS1C,GAAT,EAAcE,GAAd,EAAmB;AACf;AACA,YAAI,KAAKc,MAAL,KAAgB,IAApB,EACI;;AAEJ,YAAIuC,eAAe,KAAK1C,MAAL,CAAYb,GAAZ,EAAiBE,GAAjB,CAAnB;AACA;AACA,YAAIqD,iBAAiB,IAArB,EACI;;AAEJ;AACA,aAAK1C,MAAL,CAAYb,GAAZ,EAAiBE,GAAjB,IAAwB,KAAKa,UAA7B,CAXe,CAWyB;AACxC,aAAKA,UAAL,IAAmB,CAAC,CAApB,CAZe,CAYO;;AAEtB,YAAI,EAACC,MAAD,EAASwC,MAAT,KAAmB,KAAKC,UAAL,EAAvB;AACA,aAAKzC,MAAL,GAAcA,MAAd;AACA,YAAIA,WAAW,IAAf,EACI,KAAK0C,eAAL,CAAqBF,MAArB;;AAEJ,aAAKpC,SAAL,GAnBe,CAmBE;AACjB,aAAKD,UAAL,GApBe,CAoBG;;AAElB,aAAKD,UAAL;AACH;;AAEDC,iBAAa;AACT,YAAIwC,WAAY,KAAK3C,MAAL,KAAgB,IAAhC;AACA,aAAKN,QAAL,CAAckC,OAAd,CAAsBZ,IAAtB,CAA2B2B,WAAW,QAAX,GAAsB,aAAjD;AACA,aAAKjD,QAAL,CAAcmC,MAAd,CAAqBb,IAArB,CAA0BzC,eAAeoE,WAAW,KAAK3C,MAAhB,GAAyB,KAAKD,UAA7C,CAA1B;;AAEA,YAAI4C,QAAJ,EACI,KAAKjD,QAAL,CAAc0C,IAAd,CAAmBQ,QAAnB,CAA4B,WAA5B,EADJ,KAGI,KAAKlD,QAAL,CAAc0C,IAAd,CAAmBS,WAAnB,CAA+B,WAA/B;AACP;;AAEDzC,gBAAY;AACR;AACA;;AAEA,aAAK,IAAI,EAACpB,GAAD,EAAME,GAAN,EAAWC,KAAX,EAAT,IAA8BL,eAAe,KAAKe,MAApB,CAA9B,EAA2D;AACvD,gBAAIkB,OAAO,KAAKrB,QAAL,CAAc8B,QAAd,CAAuBxC,GAAvB,EAA4BE,GAA5B,CAAX;;AAEA,gBAAI4D,SAASvE,eAAeY,KAAf,CAAb;AACA4B,iBAAKC,IAAL,CAAU8B,MAAV;;AAEA,gBAAI3D,UAAU,IAAd,EAAoB;AAChB4B,qBAAK8B,WAAL,CAAiB,gBAAjB;AACP;AACJ;;AAEDH,oBAAgBF,MAAhB,EAAwB;AACpB,YAAIO,QAAQ,KAAKrD,QAAL,CAAc8B,QAA1B;AACA,aAAK,IAAI,EAACrC,OAAO4B,IAAR,EAAT,IAA0BjC,eAAeiE,KAAf,CAA1B,EACIhC,KAAK8B,WAAL,CAAiB,QAAjB;;AAEJ,aAAK,IAAI,CAACG,CAAD,EAAIC,CAAJ,CAAT,IAAmBT,MAAnB,EACIO,MAAMC,CAAN,EAASC,CAAT,EAAYL,QAAZ,CAAqB,QAArB;AACP;;AAGD1C,iBAAa;AACT,YAAIgD,SAAS,KAAKjD,OAAL,CAAahB,MAA1B;AACA,aAAKgB,OAAL,CAAaQ,IAAb,CAAkB;AACdY,oBAAQ6B,MADM;AAEdnD,wBAAY,KAAKA,UAFH;AAGdF,oBAAQnB,cAAc,KAAKmB,MAAnB,CAHM;AAIdG,oBAAQ,KAAKA;AAJC,SAAlB;AAMA,aAAKsB,WAAL;AACH;;AAEDA,kBAAc;AACV,YAAI6B,UAAUC,KAAKC,GAAL,CAAS,CAAT,EAAY,KAAKpD,OAAL,CAAahB,MAAb,GAAsB,CAAlC,CAAd;AACA,YAAIqE,YAAY,KAAKrD,OAAL,CAAamB,KAAb,CAAmB,CAAnB,EAAsB+B,OAAtB,CAAhB;;AAEA,YAAIf,OAAO,IAAX;AACA,YAAImB,aAAaD,UAAUtB,GAAV,CAAcrB,QAAQyB,KAAK1B,kBAAL,CAAwBC,IAAxB,CAAtB,CAAjB;AACA,aAAKjB,QAAL,CAAcyC,aAAd,CAA4BqB,IAA5B,CAAiCD,UAAjC;;AAEA,YAAIE,YAAY,KAAK/D,QAAL,CAAcO,OAA9B;AACAwD,kBAAUC,OAAV,CAAkB,EAACC,WAAWF,UAAU,CAAV,EAAaG,YAAzB,EAAlB,EAA0D,GAA1D,EATU,CASqD;AAClE;;AAGD;AACAnB,iBAAa;AACT,YAAIoB,aAAa,CAAC,CAACb,CAAD,EAAIC,CAAJ,CAAD;AACb;AACC,aAAKD,CAAL,IAAUA,IAAI,KAAKxD,IAAnB,IACG,KAAKyD,CADR,IACaA,IAAI,KAAKzD,IADvB,GAEI,KAAKK,MAAL,CAAYmD,CAAZ,EAAeC,CAAf,CAFJ,GAGIa,SALR;;AAOA,aAAK,IAAI,EAAC9E,GAAD,EAAME,GAAN,EAAWC,KAAX,EAAT,IAA8BL,eAAe,KAAKe,MAApB,CAA9B,EAA2D;AACvD,gBAAIV,UAAU,IAAd,EAAoB;AAChB;;AAEJ,iBAAK,IAAI4E,cAAT,IAA2BtF,UAA3B,EAAuC;AACnC,oBAAIuF,iBAAiBD,eAAe/B,GAAf,CAAmB,CAAC,CAACiC,EAAD,EAAKC,EAAL,CAAD,KAAc,CAAClF,MAAMiF,EAAP,EAAW/E,MAAMgF,EAAjB,CAAjC,CAArB;AACA,oBAAIC,iBAAiBH,eAAehC,GAAf,CAAmB6B,UAAnB,CAArB;AACA,oBAAIM,eAAeC,KAAf,CAAqBC,KAAKA,MAAMlF,KAAhC,CAAJ,EACI,OAAO;AACHa,4BAAQb,KADL;AAEHqD,4BAAQ,CAACwB,eAAe,CAAf,CAAD,EAAoB,CAAChF,GAAD,EAAME,GAAN,CAApB,EAAgC8E,eAAe,CAAf,CAAhC;AAFL,iBAAP;AAIP;AACJ;;AAED,eAAO,EAAChE,QAAQ,IAAT,EAAewC,QAAQ,EAAvB,EAAP;AACH;;AA9NM;;AAkOX,IAAI8B,YAAY1F,EAAE,QAAF,CAAhB;AACA,IAAIe,aAAc4E,CAAD,IAAO,IAAIjF,IAAJ,CAASiF,CAAT,EAAYD,SAAZ,CAAxB","file":"game.js","sourcesContent":["const DISPLAY_SYMBOL = {\n    // mapping from internal value to external display symbol\n    null: '',\n    1: 'X',\n    '-1': 'O', // the letter O is more aesthetic than a zero\n}\nconst WIN_DELTAS = [\n    [[0, -1], [0, +1]], // left, right\n    [[-1, 0], [+1, 0]], // above, below\n    [[-1, -1], [+1, +1]], // up-left, down-right\n    [[+1, -1], [-1, +1]], // down-left, up-right\n]\n\n// Utils\ndeepCopyArray = (arr) => $.extend(true, [], arr)\n\nfunction* matrixIterator(matrix) {\n    for (let row = 0; row < matrix.length; row++)\n        for (let col = 0; col < matrix[row].length; col++)\n            yield {\n                row,\n                col,\n                value: matrix[row][col],\n            }\n}\n\nfunction applyOnEachCell(matrix, f) {\n    for (let row = 0; row < matrix.length; row++)\n        for (let col = 0; col < matrix[row].length; col++)\n            f(row, col, matrix[row][col])\n}\n\n\nclass Game {\n    constructor(size, root) {\n        this.size = size\n        this.elements = this.createGame(root)\n\n        this.initializeState()\n    }\n\n    // Initialization\n    initializeState() {\n        this.values = this.emptyValues()\n        this.nextPlayer = +1  // X\n        this.winner = null\n\n        this.history = []\n        this.appendStep()\n\n        this.syncStatus()\n        this.syncCells()\n    }\n\n    emptyValues() {\n        let state = []\n        for (let i = 0; i < this.size; i++) {\n            let row = new Array(this.size).fill(null) // different one each time\n            state.push(row)\n        }\n        return state\n    }\n\n    createHistoryBoard(step) {\n        let board = $('<table>', {'class': 'board'})\n        for (let r = 0; r < this.size; r++) {\n            let row = $('<tr>')\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>')\n                let value = step.values[r][c]\n                cell.text(DISPLAY_SYMBOL[value])\n                row.append(cell)\n            }\n            board.append(row)\n        }\n\n        board.click(() => {\n            this.values = step.values\n            this.nextPlayer = step.nextPlayer\n            this.winner = step.winner\n\n            let truncatedHistory = this.history.slice(0, step.number + 1) // keep history up until this step\n            this.history = deepCopyArray(truncatedHistory)\n\n            this.syncStatus()\n            this.syncCells()\n            this.syncHistory()\n        })\n\n        return board\n    }\n\n    createGame(root) {\n        let gameObj = this\n\n        // create the cell objects\n        let allCells = []\n        for (let r = 0; r < this.size; r++) {\n            let row = []\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>', {'class': 'ripple'})\n                cell.click(event => {\n                    gameObj.fillCell(r, c)\n                    rippleOnClick(event, cell)\n                })\n                row.push(cell)\n            }\n            allCells.push(row)\n        }\n\n        // build and insert the elements into the DOM\n        let message = $('<span>', {'class': 'message'})\n        let player = $('<span>', {'class': 'player'})\n        let status = $('<p>', {'class': 'status'})\n            .append(message)\n            .append(': ')\n            .append(player)\n\n        let rowElements = allCells.map(rowCells => $('<tr>').append(rowCells))\n        let board = $('<table>', {'class': 'board'}).append(rowElements)\n\n        let activeSide = $('<div>', {'class': 'active-side'})\n            .append(status)\n            .append(board)\n\n        let historyBoards = $('<div>', {'class': 'boards'})\n        let history = $('<div>', {'class': 'history'})\n            .append('<p>History</p>')\n            .append(historyBoards)\n\n        let game = $('<article>', {'class': 'game'})\n            .append(activeSide)\n            .append(history)\n\n        root.append(game)\n            .append('<hr>')\n\n        // height is only evaluated after the element is inserted in the DOM\n        let height = activeSide.height()\n        history.css({height: height + 'px'})\n\n        return {allCells, game, message, player, history, historyBoards}\n    }\n\n    // Updating\n    fillCell(row, col) {\n        // do nothing if the game is over\n        if (this.winner !== null)\n            return\n\n        let currentValue = this.values[row][col]\n        // do nothing if the cell is already filled\n        if (currentValue !== null)\n            return\n\n        // update the internal values and reflect the changes\n        this.values[row][col] = this.nextPlayer // set current player\n        this.nextPlayer *= -1 // switch players\n\n        let {winner, coords} = this.findWinner()\n        this.winner = winner\n        if (winner !== null)\n            this.highlightWinner(coords)\n\n        this.syncCells() // show symbols and highlights\n        this.syncStatus() // show next player or winner\n\n        this.appendStep()\n    }\n\n    syncStatus() {\n        let gameOver = (this.winner !== null)\n        this.elements.message.text(gameOver ? 'Winner' : 'Next player')\n        this.elements.player.text(DISPLAY_SYMBOL[gameOver ? this.winner : this.nextPlayer])\n\n        if (gameOver)\n            this.elements.game.addClass('game-over')\n        else\n            this.elements.game.removeClass('game-over')\n    }\n\n    syncCells() {\n        // reflect changes in this.values into the DOM elements, accessed through this.cells\n        // and the next player\n\n        for (let {row, col, value} of matrixIterator(this.values)) {\n            let cell = this.elements.allCells[row][col]\n\n            let symbol = DISPLAY_SYMBOL[value]\n            cell.text(symbol)\n\n            if (value === null) // empty cell and game is not over\n                cell.removeClass('noninteractive')\n        }\n    }\n\n    highlightWinner(coords) {\n        let cells = this.elements.allCells\n        for (let {value: cell} of matrixIterator(cells))\n            cell.removeClass('winner')\n\n        for (let [x, y] of coords)\n            cells[x][y].addClass('winner')\n    }\n\n\n    appendStep() {\n        let nSteps = this.history.length\n        this.history.push({\n            number: nSteps,\n            nextPlayer: this.nextPlayer,\n            values: deepCopyArray(this.values),\n            winner: this.winner,\n        })\n        this.syncHistory()\n    }\n\n    syncHistory() {\n        let nBoards = Math.max(1, this.history.length - 1)\n        let pastSteps = this.history.slice(0, nBoards)\n\n        let game = this\n        let pastBoards = pastSteps.map(step => game.createHistoryBoard(step))\n        this.elements.historyBoards.html(pastBoards)\n\n        let container = this.elements.history\n        container.animate({scrollTop: container[0].scrollHeight}, 200) // scroll to bottom\n    }\n\n\n    // Win condition\n    findWinner() {\n        let maybeValue = ([x, y]) =>\n            // returns the element at row x and column y or undefined if out of bounds\n            (0 <= x && x < this.size &&\n                0 <= y && y < this.size) ?\n                this.values[x][y] :\n                undefined\n\n        for (let {row, col, value} of matrixIterator(this.values)) {\n            if (value === null) // there can't be a winner with an empty center\n                continue\n\n            for (let neighborDeltas of WIN_DELTAS) {\n                let neighborCoords = neighborDeltas.map(([dx, dy]) => [row + dx, col + dy])\n                let neighborValues = neighborCoords.map(maybeValue)\n                if (neighborValues.every(v => v === value))\n                    return {\n                        winner: value,\n                        coords: [neighborCoords[0], [row, col], neighborCoords[1]],\n                    }\n            }\n        }\n\n        return {winner: null, coords: []}\n    }\n\n}\n\nlet gamesRoot = $('#games')\nlet createGame = (n) => new Game(n, gamesRoot)\n"]}