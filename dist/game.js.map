{"version":3,"sources":["../game.js"],"names":["NEED_TO_WIN","DISPLAY_SYMBOL","null","Game","constructor","size","root","elements","createGame","initializeState","values","emptyValues","nextPlayer","winner","history","appendStep","syncStatus","syncCells","state","i","row","Array","fill","push","createHistoryBoard","step","board","$","r","c","cell","value","text","append","click","truncatedHistory","slice","number","deepCopyArray","console","log","syncHistory","allCells","fillCell","message","player","status","rowElements","map","rowCells","activeSide","historyBoards","appendTo","height","css","col","currentValue","findWinner","gameOver","addClass","removeClass","highlightWhom","symbol","nSteps","length","game","boards","html","sums","transpose","diagonal","mirror","sum","reachedRequired","filter","assert","Math","sign","gamesRoot"],"mappings":"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","file":"game.js","sourcesContent":["const NEED_TO_WIN = 3 // number of adjacent symbols needed to win\nconst DISPLAY_SYMBOL = {\n    // mapping from internal value to external display symbol\n    null: '' ,\n      1 : 'X',\n    '-1': 'O', // the letter O is more aesthetic than a zero\n}\n\nclass Game {\n    constructor(size, root) {\n        this.size = size\n        this.elements = this.createGame(root)\n\n        this.initializeState()\n    }\n\n    // Initialization\n    initializeState() {\n        this.values = this.emptyValues()\n        this.nextPlayer = +1  // X\n        this.winner = null\n\n        this.history = []\n        this.appendStep()\n\n        this.syncStatus()\n        this.syncCells()\n    }\n\n    emptyValues() {\n        let state = []\n        for (let i = 0; i < this.size; i++) {\n            let row = new Array(this.size).fill(null) // different one each time\n            state.push(row)\n        }\n        return state\n    }\n\n    createHistoryBoard(step) {\n        let board = $('<table>', {'class': 'board'})\n        for (let r = 0; r < this.size; r++) {\n            let row = $('<tr>')\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>')\n                let value = step.values[r][c]\n                cell.text(DISPLAY_SYMBOL[value])\n                row.append(cell)\n            }\n            board.append(row)\n        }\n\n        board.click(() => {\n            this.values = step.values\n            this.nextPlayer = step.nextPlayer\n            this.winner = step.winner\n\n            let truncatedHistory = this.history.slice(0, step.number + 1) // keep history up until this step\n            this.history = deepCopyArray(truncatedHistory)\n            console.log(this.history);\n\n            this.syncStatus()\n            this.syncCells()\n            this.syncHistory()\n        })\n\n        return board\n    }\n\n    createGame(root) {\n        // create the cell objects\n        let allCells = []\n        for (let r = 0; r < this.size; r++) {\n            let row = []\n            for (let c = 0; c < this.size; c++) {\n                let cell = $('<td>', {\n                    click: () => this.fillCell(r, c)\n                })\n                row.push(cell)\n            }\n            allCells.push(row)\n        }\n\n        // build and insert the elements into the DOM\n        let message = $('<span>', {'class': 'message'})\n        let player  = $('<span>', {'class': 'player'})\n        let status = $('<p>', {'class': 'status'})\n            .append(message)\n            .append(': ')\n            .append(player)\n\n        let rowElements = allCells.map(rowCells => $('<tr>').append(rowCells))\n        let board = $('<table>', {'class': 'board'}).append(rowElements)\n\n        let activeSide = $('<div>', {'class': 'active-side'})\n            .append(status)\n            .append(board)\n\n        let historyBoards = $('<div>', {'class': 'boards'})\n        let history = $('<div>', {'class': 'history'})\n            .append('<p>History</p>')\n            .append(historyBoards)\n\n        $('<article>', {'class': 'game'})\n            .append(activeSide)\n            .append(history)\n            .appendTo(root)\n\n        // height is only evaluated after the element is inserted in the DOM\n        let height = activeSide.height()\n        history.css('height', height + 'px')\n\n        return { allCells, board, message, player, historyBoards }\n    }\n\n    // Updating\n    fillCell(row, col) {\n        // do nothing if the game is over\n        if (this.winner !== null)\n            return\n\n        let currentValue = this.values[row][col]\n        // do nothing if the cell is already filled\n        if (currentValue !== null)\n            return\n\n        // update the internal values and reflect the changes\n        this.values[row][col] = this.nextPlayer // set current player\n        this.nextPlayer *= -1 // switch players\n        this.winner = this.findWinner()\n\n        this.syncCells() // show symbols and highlights\n        this.syncStatus() // show next player or winner\n\n        this.appendStep()\n    }\n\n    syncStatus() {\n        let gameOver = (this.winner !== null)\n        this.elements.message.text(gameOver ? 'Winner' : 'Next player')\n        this.elements.player.text(DISPLAY_SYMBOL[gameOver ? this.winner : this.nextPlayer])\n\n        if (gameOver)\n            this.elements.board.addClass('game-over')\n        else\n            this.elements.board.removeClass('game-over')\n    }\n    syncCells() {\n        // reflect changes in this.values into the DOM elements, accessed through this.cells\n        // and the next player\n\n        let highlightWhom = (this.winner === null) ?\n            this.nextPlayer : // highlight the next player if game in progress\n            this.winner       // if game over, highlight the winner\n\n        for (let r = 0; r < this.size; r++) {\n            for (let c = 0; c < this.size; c++) {\n                let value = this.values[r][c]\n                let cell = this.elements.allCells[r][c]\n\n                let symbol = DISPLAY_SYMBOL[value]\n                cell.text(symbol)\n\n                if (value === highlightWhom)\n                    cell.addClass('highlighted')\n                else\n                    cell.removeClass('highlighted')\n            }\n        }\n    }\n\n    appendStep() {\n        let nSteps = this.history.length\n        this.history.push({\n            number: nSteps,\n            nextPlayer: this.nextPlayer,\n            values: deepCopyArray(this.values),\n            winner: this.winner,\n        })\n        this.syncHistory()\n    }\n    syncHistory() {\n        let game = this\n        let boards = this.history.map(step => game.createHistoryBoard(step))\n        this.elements.historyBoards.html(boards)\n    }\n\n\n    // Win condition\n    findWinner() {\n        let sums = [\n            ...this.values,                // on each row\n            ...transpose(this.values),     // on each column\n            diagonal(this.values),         // on main diagonal\n            diagonal(mirror(this.values)), // on secondary diagonal\n        ].map(sum)\n\n        let reachedRequired = sums.filter(sum => sum === NEED_TO_WIN)\n        if (reachedRequired.length === 0)\n            // no symbol reached the required number of occurrences to win\n            return null\n        else {\n            console.assert(reachedRequired.length === 1,\n                'There should be at most ONE symbol to reach the required number of occurrences', reachedRequired)\n            return Math.sign(reachedRequired[0]) // +1 for a sum of 3, -1 for a sum of -3\n        }\n    }\n\n}\n\nlet gamesRoot = $('#games')\nconst game = new Game(3, gamesRoot)\n"]}